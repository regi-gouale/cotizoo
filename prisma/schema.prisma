generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id              String           @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  role            UserRole         @default(USER)
  status          UserStatus       @default(ACTIVE)
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]
  tontines        UserTontine[]
  transactions    Transaction[]
  historyLogs     TontineHistory[]
  tickets         Ticket[] // Relation avec les tickets
  contactMessages ContactMessage[] // Relation avec les messages de contact
  comments        Comment[] // Relation avec les commentaires

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Tontine {
  id                    String           @id @default(cuid())
  name                  String
  description           String
  type                  TontineType
  frequency             TontineFrequency @default(MONTHLY)
  contributionPerMember Decimal
  startDate             DateTime
  endDate               DateTime
  maxMembers            Int
  status                TontineStatus    @default(ACTIVE)
  penaltyFee            Decimal?         @default(5.0)
  allocationMethod      AllocationMethod @default(FIXED)
  rules                 String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  members               UserTontine[]
  transactions          Transaction[]
  historyLogs           TontineHistory[]

  @@map("tontine")
}

model UserTontine {
  id        String      @id @default(cuid())
  userId    String
  tontineId String
  role      TontineRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tontine Tontine @relation(fields: [tontineId], references: [id], onDelete: Cascade)

  @@unique([userId, tontineId])
  @@map("user_tontine")
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String
  tontineId     String
  amount        Decimal
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  paymentMethod String?
  reference     String?
  createdAt     DateTime          @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tontine Tontine @relation(fields: [tontineId], references: [id], onDelete: Cascade)

  @@map("transaction")
}

model TontineHistory {
  id        String        @id @default(cuid())
  tontineId String
  userId    String?
  action    HistoryAction
  details   String?
  createdAt DateTime      @default(now())

  tontine Tontine @relation(fields: [tontineId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])

  @@map("tontine_history")
}

model ContactMessage {
  id        String        @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String        @db.Text
  ipAddress String?
  userAgent String?
  status    ContactStatus @default(NEW)
  userId    String?
  ticketId  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  ticket Ticket? @relation(fields: [ticketId], references: [id], onDelete: SetNull)

  @@map("contact_message")
}

model Ticket {
  id           String         @id @default(cuid())
  subject      String
  description  String? // Ajouté du second modèle, optionnel pour compatibilité
  status       TicketStatus   @default(OPEN)
  priority     TicketPriority @default(NORMAL)
  userId       String?
  assignedToId String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  closedAt     DateTime?

  user            User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  contactMessages ContactMessage[]
  ticketResponses TicketResponse[]
  comments        Comment[] // Ajouté du second modèle

  @@index([userId])
  @@map("ticket")
}

model TicketResponse {
  id          String   @id @default(cuid())
  message     String   @db.Text
  isFromStaff Boolean  @default(false)
  ticketId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_response")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id])

  @@index([ticketId])
  @@index([userId])
  @@map("comment")
}

enum TontineType {
  ROTATIF
  INVESTISSEMENT
  PROJET
}

enum TontineRole {
  ADMIN
  MEMBER
}

enum TontineStatus {
  ACTIVE
  COMPLETED
  SUSPENDED
}

enum AllocationMethod {
  FIXED
  VOTE
  RANDOM
  ENCHERE
}

enum TransactionType {
  COTISATION
  REDISTRIBUTION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum HistoryAction {
  CREATION
  JOIN
  EXCLUSION
  PAYMENT
  RULES_UPDATED
  REDISTRIBUTION
}

enum TontineFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  YEARLY
}

enum ContactStatus {
  NEW
  READ
  REPLIED
  CONVERTED_TO_TICKET
  ARCHIVED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_CUSTOMER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}
