generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String           @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  tontines      UserTontine[]
  transactions  Transaction[]
  historyLogs   TontineHistory[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Tontine {
  id               String           @id @default(cuid())
  name             String
  description      String
  type             TontineType
  frequency        String
  contribution     Decimal
  startDate        DateTime
  endDate          DateTime
  maxMembers       Int
  status           TontineStatus    @default(ACTIVE)
  penaltyFee       Decimal          @default(5.0)
  allocationMethod AllocationMethod @default(FIXED)
  rules            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  members          UserTontine[]
  transactions     Transaction[]
  historyLogs      TontineHistory[]

  @@map("tontine")
}

model UserTontine {
  id        String      @id @default(cuid())
  userId    String
  tontineId String
  role      TontineRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tontine Tontine @relation(fields: [tontineId], references: [id], onDelete: Cascade)

  @@unique([userId, tontineId])
  @@map("user_tontine")
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String
  tontineId     String
  amount        Decimal
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  paymentMethod String?
  reference     String?
  createdAt     DateTime          @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tontine Tontine @relation(fields: [tontineId], references: [id], onDelete: Cascade)

  @@map("transaction")
}

model TontineHistory {
  id        String        @id @default(cuid())
  tontineId String
  userId    String?
  action    HistoryAction
  details   String?
  createdAt DateTime      @default(now())

  tontine Tontine @relation(fields: [tontineId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])

  @@map("tontine_history")
}

enum TontineType {
  ROTATIF
  INVESTISSEMENT
  PROJET
}

enum TontineRole {
  ADMIN
  MEMBER
}

enum TontineStatus {
  ACTIVE
  COMPLETED
  SUSPENDED
}

enum AllocationMethod {
  FIXED
  VOTE
  RANDOM
  ENCHERE
}

enum TransactionType {
  COTISATION
  REDISTRIBUTION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum HistoryAction {
  CREATION
  JOIN
  EXCLUSION
  PAYMENT
  RULES_UPDATED
  REDISTRIBUTION
}
